@model SecurityEF.SecurityForm

@{
    ViewBag.Title = "Create";
}

<h2>Add Form</h2>

@using (Html.BeginForm("Create", "Form", FormMethod.Post, new { id = "Form01" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>SecurityUser</legend>
        @Html.HiddenFor(model => model.ApplicationCode)

        <div class="editor-label">
            @Html.LabelFor(model => model.ApplicationName, "ApplicationName")
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.ApplicationName, new { @readonly = "readonly", Style = "background:#cccccc;" })
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.FormName)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.FormName)
            @Html.ValidationMessageFor(model => model.FormName)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Remarks)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Remarks)
            @Html.ValidationMessageFor(model => model.Remarks)
        </div>

        <div class="editor-label">
            @Html.Label("Is Active")
        </div>
        <div class="editor-field">
            @Html.CheckBoxFor(model => model.ActiveFlag2)
            @Html.ValidationMessageFor(model => model.ActiveFlag2)
        </div>
        <p>
            <input type="submit" value="Save" />
        </p>
    </fieldset>
}

<p>
    @Html.ActionLink("Back to Form List", "Index", "Form", new { pApplicationCode = @Model.ApplicationCode }, null)
</p>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        // just for the demos, avoids form submit
        jQuery.validator.setDefaults({
            debug: true,
            success: "valid"
        });

        $("#Form01").validate({
            rules: {
                //----------Validation rule for LoginName--------
                FormName: {
                    required: true,
                    minlength: 3,
                    maxlength: 50
                },

                //----------Validation rule for Remarks--------
                Remarks: {
                    required: false,
                    maxlength: 100
                },
            },
            errorElement: 'span',
            submitHandler: function (form) {
                form.submit();
            }
        });
    </script>
}
